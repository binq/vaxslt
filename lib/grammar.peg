start
  = intermediate:intermediate_lines* last:line {
    var lines = intermediate.concat(last);
    var compiler = new Compiler();

    for(var i=0; i<lines.length; i++) { compiler.eval(lines[i]); }
    return compiler.result();
  }

intermediate_lines
  = line:line "\n" { return line; }

line
  = indent:indent line:bare_line {
    line.indent = indent.length;
    return line;
  }
  / indent:indent
  /

bare_line
  = tag_line
  / replacement
  / text

tag_line
  = '>' predicate:.* {  //- predicate for locals
    return {type: 'partial'};
  }
  / '-' predicate:.* {  //- predicate for directive expression
    return {type: 'directive'};
  }
  / statement:tag_statement predicate:tag_predicate {
    var result = statement;

    switch(predicate.type) {
    case 'blank':
      break;
    case 'text':
      result.text = predicate.content
      break;
    case 'replacement':
      result.replacement = predicate.name;
      break;
    default:
      throw "Unrecoverable: 93c26db0-2c27-012e-811c-0017f2ca58f7";
      break;
    }

    return result;
  }

tag_statement
  = clauses:tag_clause+ {
    var result = {};

    /* Declaration types of id, class, js-section, or js-hook need to belong inside a tag, Whereas scoped and not_scoped do not. */
    var tag_necessary = false;

    var process = function(declaration, label) {
      switch(declaration.type) {
      case 'tag':
        if (typeof result.tag == "undefined") result.tag = label;
        break;
      case 'id':
        tag_necessary = true;
        if (typeof result.id == "undefined") result.id = label;
        break;
      case 'class':
        tag_necessary = true;
        if (typeof result.classes == "undefined") result.classes = [];
        result.classes.push(label);
        break;
      case 'js_section':
        tag_necessary = true;
        if (typeof result.classes == "undefined") result.classes = [];
        result.classes.push("js-section");
        result.classes.push(label + "-js");
        break;
      case 'js_hook':
        tag_necessary = true;
        if (typeof result.classes == "undefined") result.classes = [];
        result.classes.push("js-hook");
        result.classes.push(label + "-js");
        break;
      case 'scoped':
        if (typeof result.scoped == "undefined") result.scoped = label;
        break;
      case 'not_scoped':
        if (typeof result.not_scoped == "undefined") result.not_scoped = [];
        result.not_scoped.push(label);
        break;
      default:
        throw "Unrecoverable: 2e9d9e40-2a2d-012e-811b-0017f2ca58f7";
        break;
      }
    }

    for(var i=0; i<clauses.length; i++) {
      for(var j=0; j<clauses[i].declarations.length; j++) {
        process(clauses[i].declarations[j], clauses[i].label);
      }
    }

    if (tag_necessary == true && typeof result.tag == "undefined") result.tag = "div";

    return result;
  }

tag_clause
  = declarations:tag_declaration+ label:token {
    return {declarations: declarations, label: label};
  }

tag_declaration
  = '%' { return {type: 'tag'}; }        //- tag_dec_generic
  / '#' { return {type: 'id'}; }         //- tag_dec_id
  / '.' { return {type: 'class'}; }      //- tag_dec_class
  / '*' { return {type: 'js_section'}; } //- tag_dec_js_section
  / '+' { return {type: 'js_hook'}; }    //- tag_dec_js_hook
  / '@' { return {type: 'scoped'}; }     //- tag_dec_scoped
  / '^' { return {type: 'not_scoped'}; } //- tag_dec_not_scoped

tag_predicate
  = replacement
  / " "+ text:text {
    return {type: "text", content: text.content};
  }
  / {
    return {type: "blank"};
  }

replacement
  = '=' spaces token:token {
    return {type: "replacement", name: token};
  }
  / '=' spaces '_' {
    return {type: "replacement", name: '_'};
  }

text
  = text:[^\n]+ { return {content: text.join('')}; }

indent
  = spaces

spaces
  = spaces:[ ]* { return spaces.join(''); }

token
  = token_head:[a-zA-Z] token_rest:[a-zA-Z0-9:_-]* { return token_head + token_rest.join(''); }
